// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique()
  phone_number String? @unique
  name String
  email String? @unique()
  college String @default("University of Houston-Downtown")
  courses String? @default("None shared yet")
  year String? @default("")
  image String @default("https://assets.api.uizard.io/api/cdn/stream/a66d2907-c3f9-47b0-bf0f-db5ef51dee62.jpg")
  groups Group[]  @relation("UserGroups")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token String?
  verification_token String?
  verification_secret String?
  verification_token_expiry String?
  isUserRegistered Boolean @default(false)
  major String? @default("")
  isbioDataUpdated Boolean @default(false)
  assistant Assistant[]
  documents Documents[]
  deviceToken String?
  blocked_users String[] @default([])
}

model Group {
  id Int @id @default(autoincrement())
  name String
  image String? @default("https://cdn-icons-png.flaticon.com/512/1911/1911087.png")
  admins Int[]
  college String
  users User[] @relation("UserGroups")
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  flashcards FlashCard[]
  type String
  theme String?
  assistant Assistant[]
}

model FlashCard {
  id Int @id @default(autoincrement())
  name String
  questions String[]
  answers String[]
  group_id Int
  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)
  creator String
}

model Assistant {
  id Int @id @default(autoincrement())
  name String
  chatbotName String @unique
  instructions String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  documents AssistantDocuments[]
  user_id Int?
  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group_id Int?
  group Group? @relation(fields: [group_id], references: [id], onDelete: Cascade)
}

model AssistantDocuments {
  id Int @id @default(autoincrement())
  name String
  assistant_id Int
  assistant Assistant @relation(fields: [assistant_id], references: [id], onDelete: Cascade)
  document_id String
  status String
  percent_done String
  signed_url String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Documents {
  id Int @id @default(autoincrement())
  name String
  document_url String
  user_id Int
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}